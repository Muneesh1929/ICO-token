"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/index.js":
/*!**************************!*\
  !*** ./context/index.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTEXT: function() { return /* binding */ CONTEXT; },\n/* harmony export */   CONTEXT_Provider: function() { return /* binding */ CONTEXT_Provider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _uniswap_v3_core_artifacts_contracts_UniswapV3Pool_sol_UniswapV3Pool_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @uniswap/v3-core/artifacts/contracts/UniswapV3Pool.sol/UniswapV3Pool.json */ \"./node_modules/@uniswap/v3-core/artifacts/contracts/UniswapV3Pool.sol/UniswapV3Pool.json\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-hot-toast */ \"./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @uniswap/sdk-core */ \"./node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js\");\n/* harmony import */ var _uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @uniswap/v3-sdk */ \"./node_modules/@uniswap/v3-sdk/dist/v3-sdk.esm.js\");\n/* harmony import */ var _uniswap_v3_core_artifacts_contracts_interfaces_IUniswapV3Pool_sol_IUniswapV3Pool_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json */ \"./node_modules/@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json\");\n/* harmony import */ var _uniswap_v3_periphery_artifacts_contracts_interfaces_INonfungiblePositionManager_sol_INonfungiblePositionManager_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @uniswap/v3-periphery/artifacts/contracts/interfaces/INonfungiblePositionManager.sol/INonfungiblePositionManager.json */ \"./node_modules/@uniswap/v3-periphery/artifacts/contracts/interfaces/INonfungiblePositionManager.sol/INonfungiblePositionManager.json\");\n/* harmony import */ var _abi_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./abi.json */ \"./context/abi.json\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./constants */ \"./context/constants.js\");\n/* harmony import */ var _Utils_index__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../Utils/index */ \"./Utils/index.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n//internal import \n\n\nconst CONTEXT = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\nconst CONTEXT_Provider = (param)=>{\n    let { children } = param;\n    _s();\n    const DAPP_NAME = \"Liquidity Dapp\";\n    const [loader, setLoader] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [chainID, setChainID] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    //token\n    const [balance, setBalance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [nativeToken, setNativeToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [tokenHolders, setTokenHolders] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [tokenSale, setTokenSale] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [currentHolder, setCurrentHolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    //notification\n    const notifyError = (msg)=>react_hot_toast__WEBPACK_IMPORTED_MODULE_5__[\"default\"].error(msg, {\n            duration: 4000\n        });\n    const notifySuccess = (msg)=>react_hot_toast__WEBPACK_IMPORTED_MODULE_5__[\"default\"].success(msg, {\n            duration: 4000\n        });\n    //connect wallet\n    const connect = async ()=>{\n        try {\n            if (!window.ethereum) return notifyError(\"Install Metamask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            if (accounts.length) {\n                setAddress(accounts[0]);\n            } else {\n                notifyError(\"Sorry , you have No account\");\n            }\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.providers.Web3Provider(window.ethereum);\n            const network = await provider.getNetwork();\n            setChainID(network.chainId);\n        } catch (error) {\n            const errorMsg = (0,_Utils_index__WEBPACK_IMPORTED_MODULE_12__.parseErrorMsg)(error);\n            notifyError(errorMsg);\n            console.log(error);\n        }\n    };\n    //check if wallet connected\n    const checkIfWalletConnected = async ()=>{\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        return accounts[0];\n    };\n    const LOAD_TOKEN = async (token)=>{\n        try {\n            const tokenDetail = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.CONNECTING_CONTRACT)(token);\n            return tokenDetail;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    //get pool address\n    const GET_POOL_ADDRESS = async (token_1, token_2, fee)=>{\n        try {\n            setLoader(true);\n            const PROVIDER = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.web3Provider)();\n            const factoryContract = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_11__.FACTORY_ADDRESS, _constants__WEBPACK_IMPORTED_MODULE_11__.FACTORY_ABI, PROVIDER);\n            const poolAddress = await factoryContract.functions.getPool(token_1.address, token_2.address, Number(fee));\n            const poolHistory = {\n                token_A: token_1,\n                token_B: token_2,\n                fee: fee,\n                network: token_1.chainId,\n                poolAddress: poolAddress\n            };\n            const zeroAdd = \"0x0000000000000000000000000000000000000000\";\n            if (poolAddress == zeroAdd) {\n                notifySuccess(\"Sorry there is no pool\");\n                setLoader(false);\n            } else {\n                let poolArray = [];\n                const poolLists = localStorage.getItem(\"poolHistory\");\n                if (poolLists) {\n                    poolArray = JSON.parse(localStorage.getItem(\"poolHistory\"));\n                    poolArray.push(poolHistory);\n                    localStorage.setItem(\"poolHistory\", JSON.stringify(poolArray));\n                } else {\n                    poolArray.push(poolHistory);\n                    localStorage.setItem(\"poolHistory\", JSON.stringify(poolArray));\n                }\n                setLoader(false);\n                notifySuccess(\"Successfully completed\");\n            }\n            return poolAddress;\n        } catch (error) {\n            const errorMsg = (0,_Utils_index__WEBPACK_IMPORTED_MODULE_12__.parseErrorMsg)(error);\n            notifyError(errorMsg);\n        }\n    };\n    //create liquidity\n    async function getPoolData(poolContract) {\n        const [tickSpacing, fee, liquidity, slot0] = await Promise.all([\n            poolContract.tickSpacing(),\n            poolContract.fee(),\n            poolContract.liquidity(),\n            poolContract.slot0()\n        ]);\n        return {\n            tickSpacing: tickSpacing,\n            fee: fee,\n            liquidity: liquidity,\n            sqrtPriceX96: slot0[0],\n            tick: slot0[1]\n        };\n    }\n    const CREATE_LIQUIDITY = async (pool, liquidityAmount, approveAmount)=>{\n        try {\n            setLoader(true);\n            const address = await checkIfWalletConnected();\n            const PROVIDER = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.web3Provider)();\n            const signer = PROVIDER.getSigner();\n            const TOKEN_1 = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_6__.Token(pool.token_A.chainId, pool.token_A.address, pool.token_A.decimals, pool.token_A.symbol, pool.token_A.name);\n            const TOKEN_2 = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_6__.Token(pool.token_B.chainId, pool.token_B.address, pool.token_B.decimals, pool.token_B.symbol, pool.token_B.name);\n            const poolAddress = pool.poolAddress[0];\n            const nonfungiblePositionManagerContract = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_11__.positionManagerAddress, _uniswap_v3_periphery_artifacts_contracts_interfaces_INonfungiblePositionManager_sol_INonfungiblePositionManager_json__WEBPACK_IMPORTED_MODULE_9__.abi, PROVIDER);\n            const poolContract = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.Contract(poolAddress, _uniswap_v3_core_artifacts_contracts_interfaces_IUniswapV3Pool_sol_IUniswapV3Pool_json__WEBPACK_IMPORTED_MODULE_8__.abi, PROVIDER);\n            const poolData = await getPoolData(poolContract);\n            const TOKEN_1_TOKEN2_POOL = new _uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.Pool(TOKEN_1, TOKEN_2, poolData.fee, poolData.sqrtPriceX96.toString(), poolData.liquidity.toString(), poolData.tick);\n            const position = new _uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.Position({\n                pool: TOKEN_1_TOKEN2_POOL,\n                liquidity: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.parseUnits(liquidityAmount, 18),\n                tickLower: (0,_uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.nearestUsableTick)(poolData.tick, poolData.tickSpacing) - poolData.tickSpacing * 2,\n                tickUpper: (0,_uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.nearestUsableTick)(poolData.tick, poolData.tickSpacing) + poolData.tickSpacing * 2\n            });\n            const approvalAmount = ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.parseUnits(approveAmount, 18).toString();\n            const tokenContract0 = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.Contract(pool.token_A.address, _abi_json__WEBPACK_IMPORTED_MODULE_10__, PROVIDER);\n            await tokenContract0.connect(signer).approve(_constants__WEBPACK_IMPORTED_MODULE_11__.positionManagerAddress, approvalAmount);\n            const tokenContract1 = new ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.Contract(pool.token_B.address, _abi_json__WEBPACK_IMPORTED_MODULE_10__, PROVIDER);\n            await tokenContract1.connect(signer).approve(_constants__WEBPACK_IMPORTED_MODULE_11__.positionManagerAddress, approvalAmount);\n            const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts;\n            //minAmountsWithSlippage\n            const params = {\n                token0: pool.token_A.address,\n                token1: pool.token_B.address,\n                fee: poolData.fee,\n                tickLower: (0,_uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.nearestUsableTick)(poolData.tick, poolData.tickSpacing) - poolData.tickSpacing * 2,\n                tickUpper: (0,_uniswap_v3_sdk__WEBPACK_IMPORTED_MODULE_7__.nearestUsableTick)(poolData.tick, poolData.tickSpacing) + poolData.tickSpacing * 2,\n                amount0Desired: amount0Desired.toString(),\n                amount1Desired: amount1Desired.toString(),\n                amount0Min: amount0Desired.toString(),\n                amount1Min: amount1Desired.toString(),\n                recipient: address,\n                deadline: Math.floor(Date.now() / 1000) + 60 * 10\n            };\n            const transactionHash = await nonfungiblePositionManagerContract.connect(signer).mint(params, {\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.hexlify(1000000)\n            }).then((res)=>{\n                return res.hash;\n            });\n            if (transactionHash) {\n                const liquidityContract = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalAddLiquidity)();\n                const addLiquidityData = await liquidityContract.connect(signer).addLiquidity(pool.token_A.name, pool.token_B.name, pool.token_A.address, pool.token_B.address, poolAddress, pool.token_B.chainId.toString(), transactionHash);\n                await addLiquidityData.wait();\n                setLoader(false);\n                notifySuccess(\"Liquidity added successfully\");\n                window.location.reload();\n            }\n        } catch (error) {\n            const errorMsg = (0,_Utils_index__WEBPACK_IMPORTED_MODULE_12__.parseErrorMsg)(error);\n            setLoader(false);\n            notifyError(errorMsg);\n        }\n    };\n    //native token\n    const fetchInitialData = async ()=>{\n        try {\n            //get user account\n            const account = await checkIfWalletConnected();\n            //get user balance\n            const balance = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.getBalance)();\n            setBalance(ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(balance.toString()));\n            setAddress(account);\n            //Woox_TOKEN_CONTRACT\n            const WOOX_TOKEN_CONTRACT = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalWooxContract)();\n            let tokenBalance;\n            if (account) {\n                tokenBalance = await WOOX_TOKEN_CONTRACT.balanceOf(account);\n            } else {\n                tokenBalance = 0;\n            }\n            const tokenName = await WOOX_TOKEN_CONTRACT.name();\n            const tokenSymbol = await WOOX_TOKEN_CONTRACT.symbol();\n            const tokenTotalSupply = await WOOX_TOKEN_CONTRACT.totalSupply();\n            const tokenStandard = await WOOX_TOKEN_CONTRACT.standard();\n            const tokenHolders = await WOOX_TOKEN_CONTRACT._userId();\n            const tokenOwnerOfContract = await WOOX_TOKEN_CONTRACT.ownerOfContract();\n            const tokenAddress = await WOOX_TOKEN_CONTRACT.address;\n            const nativeToken = {\n                tokenAddress: tokenAddress,\n                tokenName: tokenName,\n                tokenSymbol: tokenSymbol,\n                tokenOwnerOfContract: tokenOwnerOfContract,\n                tokenStandard: tokenStandard,\n                tokenTotalSupply: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(tokenTotalSupply.toString()),\n                tokenBalance: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(tokenBalance.toString()),\n                tokenHolders: tokenHolders.toNumber()\n            };\n            setNativeToken(nativeToken);\n            //getting token holders\n            const getTokenHolder = await WOOX_TOKEN_CONTRACT.getTokenHolder();\n            setTokenHolders(getTokenHolder);\n            //getting token holder data\n            if (account) {\n                const getTokenHolderData = await WOOX_TOKEN_CONTRACT.getTokenHolderData(account);\n                const currentHolder = {\n                    tokenId: getTokenHolderData[0].toNumber(),\n                    from: getTokenHolderData[1],\n                    to: getTokenHolderData[2],\n                    totalToken: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(getTokenHolderData[3].toString()),\n                    tokenHolder: getTokenHolderData[4]\n                };\n                setCurrentHolder(currentHolder);\n            }\n            //token sale contract\n            const ICO_WOOX_CONTRACT = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalICOWooxContract)();\n            const tokenPrice = await ICO_WOOX_CONTRACT.tokenPrice();\n            const tokensSold = await ICO_WOOX_CONTRACT.tokensSold();\n            const tokenSaleBalance = await WOOX_TOKEN_CONTRACT.balanceOf(\"0x58Db7D49D1D619860fc7AF5DCB9ce5CC75c96872\");\n            const tokenSale = {\n                tokenPrice: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(tokenPrice.toString()),\n                tokensSold: tokensSold.toNumber(),\n                tokenSaleBalance: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.formatEther(tokenSaleBalance.toString())\n            };\n            setTokenSale(tokenSale);\n            console.log(tokenSale);\n            console.log(nativeToken);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchInitialData();\n    }, []);\n    const buyToken = async (nToken)=>{\n        try {\n            setLoader(true);\n            const PROVIDER = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.web3Provider)();\n            const signer = PROVIDER.getSigner();\n            const contract = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalICOWooxContract)();\n            console.log(contract);\n            const price = 0.0001 * nToken;\n            const amount = ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.parseUnits(price.toString(), \"ether\");\n            const buying = await contract.connect(signer).buyTokens(nToken, {\n                value: amount.toString(),\n                gasLimit: ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.hexlify(1000000)\n            });\n            await buying.wait();\n            window.location.reload();\n        } catch (error) {\n            const errorMsg = (0,_Utils_index__WEBPACK_IMPORTED_MODULE_12__.parseErrorMsg)(error);\n            console.log(error);\n            setLoader(false);\n            notifyError(errorMsg);\n        }\n    };\n    //native token transfer\n    const transferNativeToken = async ()=>{\n        try {\n            setLoader(true);\n            const PROVIDER = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.web3Provider)();\n            const signer = PROVIDER.getSigner();\n            const TOKEN_SALE_ADDRESS = \"0x58Db7D49D1D619860fc7AF5DCB9ce5CC75c96872\";\n            const TOKEN_AMOUNT = 5000;\n            const tokens = TOKEN_AMOUNT.toString();\n            const transferAmount = ethers__WEBPACK_IMPORTED_MODULE_13__.ethers.utils.parseEther(tokens);\n            const contract = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalWooxContract)();\n            const transaction = await contract.connect(signer).transfer(TOKEN_SALE_ADDRESS, transferAmount);\n            await transaction.wait();\n            set;\n            window.location.reload();\n        } catch (error) {\n            const errorMsg = (0,_Utils_index__WEBPACK_IMPORTED_MODULE_12__.parseErrorMsg)(error);\n            setLoader(false);\n            notifyError(errorMsg);\n        }\n    };\n    //liquidity history\n    const GET_ALL_LIQUIDITY = async ()=>{\n        try {\n            //get user account\n            const account = await checkIfWalletConnected();\n            const contract = await (0,_constants__WEBPACK_IMPORTED_MODULE_11__.internalAddLiquidity)();\n            const liquidityHistory = await contract.getAllLiquidity(account);\n            const Allliquidity = liquidityHistory.map((liquidity)=>{\n                const liquidityArray = {\n                    id: liquidity.id.toNumber(),\n                    network: liquidity.network,\n                    owner: liquidity.owner,\n                    poolAddress: liquidity.poolAddress,\n                    tokenA: liquidity.tokenA,\n                    tokenB: liquidity.tokenB,\n                    tokenA_Address: liquidity.tokenA_Address,\n                    tokenB_Address: liquidity.tokenB_Address,\n                    timeCreated: liquidity.timeCreated.toNumber(),\n                    transactionHash: liquidity.transactionHash\n                };\n                return liquidityArray;\n            });\n            return Allliquidity;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CONTEXT.Provider, {\n        value: {\n            connect,\n            GET_POOL_ADDRESS,\n            LOAD_TOKEN,\n            notifyError,\n            notifySuccess,\n            CREATE_LIQUIDITY,\n            GET_ALL_LIQUIDITY,\n            transferNativeToken,\n            buyToken,\n            tokenSale,\n            nativeToken,\n            address,\n            loader,\n            DAPP_NAME\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\ermac\\\\OneDrive\\\\Desktop\\\\ICO token\\\\Create-Liquidity-Marketplace\\\\context\\\\index.js\",\n        lineNumber: 473,\n        columnNumber: 9\n    }, undefined);\n};\n_s(CONTEXT_Provider, \"XhJ0t3GhZYexg+gKNQ2h6GiNh18=\");\n_c = CONTEXT_Provider;\nvar _c;\n$RefreshReg$(_c, \"CONTEXT_Provider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/index.js\n"));

/***/ })

});